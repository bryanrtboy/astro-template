---
import type { GalleryItem } from '../lib/types';
const { item, priority = false } = Astro.props as { item: GalleryItem; priority?: boolean };

const stem = (item as any).stemFileSafe ?? item.stem;

// Lean, tile-appropriate candidates
const widths = [320, 480, 720, 960];

const sizes = [
    '(max-width: 520px) calc(100vw - 2.5rem)',                                  // 1 col
    '(max-width: 900px) calc((100vw - 2.5rem - 10px) / 2)',                      // 2 cols (1 gap)
    '(max-width: 1151px) calc((min(100vw, 1200px) - 2.5rem - 3*10px) / 4)',      // 4 cols (3 gaps)
    '(max-width: 1200px) calc((min(100vw, 1200px) - 2.5rem - 4*10px) / 5)',      // 5 cols (4 gaps)
    'calc((min(100vw, 1200px) - 2.5rem - 4*10px) / 5)',                          // 5 cols â‰¥1200
].join(', ');

const set = (ext: string) =>
    widths.map(w => `/thumbs/${item.section}/${stem}-w${w}.${ext} ${w}w`).join(', ');

// Small but safe fallback (doesn't force 480 download; just a fallback)
const fallbackSrc = `/thumbs/${item.section}/${stem}-w480.jpg`;
---
<picture>
    <source type="image/avif" srcset={set('avif')} sizes={sizes} />
    <source type="image/webp" srcset={set('webp')} sizes={sizes} />
    <img
            src={fallbackSrc}
            srcset={set('jpg')}
            sizes={sizes}
            alt={item.title}
            width={item.width}
            height={item.height}
            loading={priority ? 'eager' : 'lazy'}
            fetchpriority={priority ? 'high' : 'auto'}
            decoding="async"
    />
</picture>
